/*

  CSS Grid

  * Klim's site
  * https://alligator.io/css/css-grid-layout-grid-areas/
  * grid-template-columns with repeat, autfill & minmax = https://rachelandrew.co.uk/archives/2016/04/12/flexible-sized-grids-with-auto-fill-and-minmax/
  * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout
  * https://css-tricks.com/snippets/css/complete-guide-grid/

  * grid-row — shorthand for grid-row-start / grid-row-end
  * grid-column — shorthand for grid-column-start / grid-column-end
  * grid-area — shorthand for…
      grid-row-start: a;
      grid-column-start: a;
      grid-row-end: a;
      grid-column-end: a;
    eg: grid-area: a / a / a / a;

  * grid-auto-flow: how the auto-placement algorithm works
    see: https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow

  * start / end examples
    .item1 {
      grid-column: 1 / 5;
    }
    .item2 {
      grid-column: 1 / 3;
      grid-row: 2 / 4;
    }
    .item3 {
      grid-column: 3 / 5;
    }

  Tailwind:
    * https://github.com/chrisrowe/tailwindcss-grid
    * https://tailwindcss.github.io/plugin-examples/#css-grid

 */

:root {
  --gridColumnCount: 12;
  /* --gridColumnGap: calc(12 / 1680 * 100vw); */
  --gridColumnGap: calc(42 / 1680 * 100vw);
  /* --gridMarginGapRelative: calc(56 / 1680); */
  --gridMarginGapRelative: calc(84 / 1680);
  --gridMarginGap: calc(var(--gridMarginGapRelative) * 100vw);
  /* grid-template-columns: 2fr 2fr 1fr 2fr; */
  --gridTemplateColumnsDefault: repeat(var(--gridColumnCount), minmax(0, 1fr));
}
@screen xl {
  :root {
    /* --gridMarginGapRelative: calc(224 / 1680); */
  }
}

/* DEFAULT AREAS */
.frame-area-a {
  grid-area: a;
}
.frame-area-b {
  grid-area: b;
}
.frame-area-c {
  grid-area: c;
}
.frame-area-d {
  grid-area: d;
}

/*

  grid applied, taken from Klim…

 */

.frame {
  display: grid;
  grid-template-columns: var(--gridTemplateColumnsDefault);
  grid-column-gap: var(--gridColumnGap);
  /* grid-row-gap: var(--spacing3); */
  grid-row-gap: var(--spacing5);
  height: auto;
  margin: 0 var(--gridMarginGap);
  /* padding: var(--subnavPaddingTopBottom) var(--gridMarginGap)
    var(--subnavPaddingBottomExpanded); */
}

.frame--lede {
  grid-template-areas:
    "a a a a a a a a a a . ."
    "b b b b b b b b b b . .";
}
@screen md {
  .frame--lede {
    grid-template-areas:
      ". a a a a a a a . . . ."
      ". b b b b b b b . . . .";
  }
}
@screen hu {
  .frame--lede {
    grid-template-areas:
      ". a a a a . . . . . . ."
      ". b b b b . . . . . . .";
  }
}

.frame--article {
  grid-template-areas: "a a a a a a a a a a a a";
}
@screen md {
  .frame--article {
    grid-template-areas: ". . a a a a a a a . . .";
  }
}
@screen hu {
  .frame--article {
    grid-template-areas: ". . a a a a a . . . . .";
  }
}

.frame--projectCards {
  --gridColumnCount: 1;
  grid-template-columns: repeat(var(--gridColumnCount), minmax(0, 1fr));
}
@screen sm {
  .frame--projectCards {
    --gridColumnCount: 3;
  }
}
@screen xl {
  .frame--projectCards {
    --gridColumnCount: 4;
  }
}
@screen hu {
  .frame--projectCards {
    --gridColumnCount: 4;
  }
}
@screen su {
  .frame--projectCards {
    /* --gridColumnCount: 5; */
  }
}
